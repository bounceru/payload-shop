/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    customers: CustomerAuthOperations;
    users: UserAuthOperations;
  };
  collections: {
    customers: Customer;
    tenants: Tenant;
    users: User;
    roles: Role;
    'membership-roles': MembershipRole;
    shops: Shop;
    events: Event;
    'event-ticket-types': EventTicketType;
    seatMaps: SeatMap;
    addons: Addon;
    orders: Order;
    tickets: Ticket;
    checkins: Checkin;
    'payment-methods': PaymentMethod;
    coupons: Coupon;
    emails: Email;
    'smtp-settings': SmtpSetting;
    'email-logs': EmailLog;
    newsletters: Newsletter;
    'support-articles': SupportArticle;
    analytics: Analytics;
    'venue-branding': VenueBranding;
    media: Media;
    'seat-map-templates': SeatMapTemplate;
    'email-templates': EmailTemplate;
    pages: Page;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    customers: CustomersSelect<false> | CustomersSelect<true>;
    tenants: TenantsSelect<false> | TenantsSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    roles: RolesSelect<false> | RolesSelect<true>;
    'membership-roles': MembershipRolesSelect<false> | MembershipRolesSelect<true>;
    shops: ShopsSelect<false> | ShopsSelect<true>;
    events: EventsSelect<false> | EventsSelect<true>;
    'event-ticket-types': EventTicketTypesSelect<false> | EventTicketTypesSelect<true>;
    seatMaps: SeatMapsSelect<false> | SeatMapsSelect<true>;
    addons: AddonsSelect<false> | AddonsSelect<true>;
    orders: OrdersSelect<false> | OrdersSelect<true>;
    tickets: TicketsSelect<false> | TicketsSelect<true>;
    checkins: CheckinsSelect<false> | CheckinsSelect<true>;
    'payment-methods': PaymentMethodsSelect<false> | PaymentMethodsSelect<true>;
    coupons: CouponsSelect<false> | CouponsSelect<true>;
    emails: EmailsSelect<false> | EmailsSelect<true>;
    'smtp-settings': SmtpSettingsSelect<false> | SmtpSettingsSelect<true>;
    'email-logs': EmailLogsSelect<false> | EmailLogsSelect<true>;
    newsletters: NewslettersSelect<false> | NewslettersSelect<true>;
    'support-articles': SupportArticlesSelect<false> | SupportArticlesSelect<true>;
    analytics: AnalyticsSelect<false> | AnalyticsSelect<true>;
    'venue-branding': VenueBrandingSelect<false> | VenueBrandingSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    'seat-map-templates': SeatMapTemplatesSelect<false> | SeatMapTemplatesSelect<true>;
    'email-templates': EmailTemplatesSelect<false> | EmailTemplatesSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: 'nl' | 'en' | 'de' | 'fr';
  user:
    | (Customer & {
        collection: 'customers';
      })
    | (User & {
        collection: 'users';
      });
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface CustomerAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customers".
 */
export interface Customer {
  id: string;
  firstname: string;
  lastname: string;
  phone?: string | null;
  date_of_birth?: string | null;
  tags?:
    | {
        tag_id?: string | null;
        tag_type?: string | null;
        id?: string | null;
      }[]
    | null;
  enabled?: boolean | null;
  tenant: string | Tenant;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tenants".
 */
export interface Tenant {
  id: string;
  name: string;
  domains?:
    | {
        domain: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Used for URL paths, example: /tenant-slug/page-slug.
   */
  slug: string;
  /**
   * Stripe Customer ID for this tenant
   */
  stripeCustomerId?: string | null;
  /**
   * If true, only Reseller or Super-Admin can subscribe to services
   */
  managedByReseller?: boolean | null;
  /**
   * If checked, logging in is not required.
   */
  public?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  /**
   * Assign roles to the user.
   */
  roles?: (string | Role)[] | null;
  tenants?:
    | {
        /**
         * Assign tenants to the user.
         */
        tenant: string | Tenant;
        /**
         * Assign roles specific to the tenant.
         */
        roles: ('tenant-admin' | 'tenant-viewer')[];
        id?: string | null;
      }[]
    | null;
  stripeCustomerId?: string | null;
  /**
   * Full name of the user (used in staff display, confirmation mails, etc.)
   */
  fullName?: string | null;
  /**
   * Optional phone number for SMS login or contact.
   */
  phoneNumber?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "roles".
 */
export interface Role {
  id: string;
  name: string;
  collections?:
    | {
        collectionName?: string | null;
        read?: boolean | null;
        create?: boolean | null;
        update?: boolean | null;
        delete?: boolean | null;
        id?: string | null;
      }[]
    | null;
  fields?:
    | {
        collectionName?: string | null;
        fieldName?: string | null;
        read?: boolean | null;
        create?: boolean | null;
        update?: boolean | null;
        delete?: boolean | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "membership-roles".
 */
export interface MembershipRole {
  id: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  /**
   * Display name (e.g. "VIP", "Gold").
   */
  label: string;
  /**
   * Internal value (e.g. "vip", "gold").
   */
  value: string;
  /**
   * If checked, auto-assign to new customers (who have no membership) for this tenant/shop.
   */
  defaultRole?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "shops".
 */
export interface Shop {
  id: string;
  name: string;
  slug?: string | null;
  showExceptionallyClosedDaysOnOrderPage?: boolean | null;
  exceptionally_closed_days?:
    | {
        date: string;
        reason?: string | null;
        id?: string | null;
      }[]
    | null;
  address?: string | null;
  location?: {
    lat?: string | null;
    lng?: string | null;
  };
  company_details: {
    company_name: string;
    contact_email?: string | null;
    phone?: string | null;
    street?: string | null;
    house_number?: string | null;
    city?: string | null;
    postal?: string | null;
    vat_nr?: string | null;
    website_url?: string | null;
  };
  domain: string;
  tenant: string | Tenant;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events".
 */
export interface Event {
  id: string;
  tenant: string | Tenant;
  title: string;
  /**
   * e.g., summer-jazz-night
   */
  slug: string;
  /**
   * Shown on overview pages or social media previews.
   */
  introText?: string | null;
  /**
   * Description.
   */
  description?: string | null;
  image?: (string | null) | Media;
  affiche?: (string | null) | Media;
  venue: string | Shop;
  date: string;
  /**
   * Optional: when the event really ends (e.g. 2am for night shows)
   */
  end?: string | null;
  type?:
    | (
        | 'theater'
        | 'concert'
        | 'dance'
        | 'comedy'
        | 'musical'
        | 'opera'
        | 'family'
        | 'talk'
        | 'workshop'
        | 'festival'
        | 'other'
      )
    | null;
  /**
   * Unpublished events are not visible to the public
   */
  isPublished?: boolean | null;
  embedAllowed?: boolean | null;
  language?: ('nl' | 'fr' | 'en' | 'de') | null;
  /**
   * Optional seat map for this event. If provided, it enables seat selection in checkout.
   */
  seatMap?: (string | null) | SeatMap;
  ticketTypes?:
    | {
        id: string | null;
        name: string;
        price: number;
        color?: string | null;
      }[]
    | null;
  /**
   * Map of seatId -> ticketTypeId
   */
  seatAssignments?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  performers?:
    | {
        image?: (string | null) | Media;
        stageName: string;
        realName?: string | null;
        socials?: {
          facebook?: string | null;
          instagram?: string | null;
          linkedin?: string | null;
          x?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  sponsors?:
    | {
        logo?: (string | null) | Media;
        id?: string | null;
      }[]
    | null;
  faqs?:
    | {
        question: string;
        answer: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Paste the full iframe code from Google Maps share → embed map.
   */
  googleMapsIframe?: string | null;
  location?:
    | (
        | 'Antwerpen'
        | 'Vlaams-Brabant'
        | 'Waals-Brabant'
        | 'West-Vlaanderen'
        | 'Oost-Vlaanderen'
        | 'Henegouwen'
        | 'Luik'
        | 'Limburg'
        | 'Luxemburg'
        | 'Namen'
        | 'Brussels Hoofdstedelijk Gewest'
      )
    | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  tenant: string | Tenant;
  /**
   * Optional tags to organize media files.
   */
  tags?:
    | {
        tag?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Alternative text for the media file to improve accessibility.
   */
  alt_text?: string | null;
  /**
   * Blurhash representation of the image for quick previews.
   */
  blurhash?: string | null;
  /**
   * URL of the original image in S3.
   */
  s3_url?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    preview?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "seatMaps".
 */
export interface SeatMap {
  id: string;
  tenant: string | Tenant;
  /**
   * Internal name (e.g., Theaterzaal Standaard)
   */
  name: string;
  venue: string | Shop;
  rows: number;
  columns: number;
  curve?: number | null;
  /**
   * Each row/seat combo with type and optional pricing
   */
  seats?:
    | {
        row: string;
        seat: string;
        pinnedRow: number;
        pinnedCol: number;
        locks?:
          | {
              eventId: string;
              lockedUntil: string;
              id?: string | null;
            }[]
          | null;
        status?: string | null;
        purpose?: string | null;
        groupLabel?: string | null;
        /**
         * If you want seats in group 1 to sell out before group 2 are purchasable, give group 1 a lower number than group 2, etc.
         */
        groupReleaseOrder?: number | null;
        /**
         * How many seats in this group must be sold before the next group (with a higher groupReleaseOrder) is unlocked?
         */
        groupMinToReleaseNext?: number | null;
        id?: string | null;
      }[]
    | null;
  seatMapJSON?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Optional background to show under seat grid (like SVG)
   */
  backgroundImage?: (string | null) | Media;
  /**
   * How row labels are displayed (Numeric, Letter, etc.)
   */
  rowFormat?: ('Numeric' | 'Letter' | 'RNumber' | 'RowNumber' | 'Continuous') | null;
  /**
   * How column (seat) labels are displayed (Numeric, Continuous, etc.)
   */
  colFormat?: ('Numeric' | 'Letter' | 'RNumber' | 'RowNumber' | 'Continuous') | null;
  isDefault?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "event-ticket-types".
 */
export interface EventTicketType {
  id: string;
  tenant: string | Tenant;
  /**
   * This ticket type is valid **only** for the selected event.
   */
  event?: (string | null) | Event;
  /**
   * Only available when editing the selected seat map.
   */
  seatMap?: (string | null) | SeatMap;
  /**
   * E.g. VIP, Standard, Student
   */
  name: string;
  price: number;
  /**
   * Lower = shown first in checkout
   */
  sortOrder?: number | null;
  /**
   * Tax percentage applied to this ticket
   */
  vatRate: number;
  /**
   * Absolute cap for this ticket type (per **event**). The Tickets hook checks this when issuing tickets.
   */
  maxAmount?: number | null;
  /**
   * Shown to customers – e.g. “Includes free drink”.
   */
  description?: string | null;
  /**
   * Untick to hide this type in the webshop while still allowing sales through magic links or POS.
   */
  visible?: boolean | null;
  /**
   * Used to color seats in the seat map if isSeatBased is true.
   */
  color?: string | null;
  /**
   * Enable if tickets of this type are tied to specific seats on a map.
   */
  isSeatBased?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "addons".
 */
export interface Addon {
  id: string;
  tenant: string | Tenant;
  name: string;
  /**
   * Shown to the user during checkout.
   */
  description?: string | null;
  price: number;
  /**
   * Enable if this add-on can be selected per ticket instead of per order.
   */
  isPerTicket?: boolean | null;
  /**
   * If disabled, this add-on is hidden from checkout.
   */
  available?: boolean | null;
  /**
   * Optional. Leave empty for unlimited.
   */
  maxQuantity?: number | null;
  image?: (string | null) | Media;
  events: (string | Event)[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders".
 */
export interface Order {
  id: string;
  tenant: string | Tenant;
  /**
   * Auto-generated, sequential per tenant
   */
  orderNr: number;
  createdAt: string;
  customer: string | Customer;
  addonSelections?:
    | {
        seatId: string;
        addonId: string;
        quantity: number;
        id?: string | null;
      }[]
    | null;
  event: string | Event;
  tickets?: (string | Ticket)[] | null;
  addons?: (string | Addon)[] | null;
  status: 'paid' | 'pending' | 'failed' | 'cancelled';
  paymentProvider?: string | null;
  paymentMethod?: (string | null) | PaymentMethod;
  paymentReference?: string | null;
  total: number;
  couponCode?: string | null;
  ipAddress?: string | null;
  locale?: ('nl' | 'fr' | 'en' | 'de') | null;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tickets".
 */
export interface Ticket {
  id: string;
  tenant: string | Tenant;
  /**
   * Auto-generated if left empty
   */
  barcode: string;
  event: string | Event;
  ticketType: string | EventTicketType;
  order: string | Order;
  customer?: (string | null) | Customer;
  seatRow?: string | null;
  seatNumber?: string | null;
  /**
   * Copied from ticket type at checkout
   */
  price: number;
  /**
   * Copied from ticket type at checkout
   */
  vatRate: number;
  status: 'valid' | 'scanned' | 'cancelled' | 'refunded';
  issuedAt: string;
  /**
   * Set automatically on first successful scan
   */
  scannedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payment-methods".
 */
export interface PaymentMethod {
  id: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  provider: 'mollie';
  mollie_settings?: {
    enable_test_mode?: boolean | null;
    live_api_key?: string | null;
    test_api_key?: string | null;
    webhook_secret?: string | null;
  };
  enabled?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "checkins".
 */
export interface Checkin {
  id: string;
  tenant: string | Tenant;
  ticket: string | Ticket;
  status: 'success' | 'duplicate' | 'invalid' | 'expired';
  scannedAt: string;
  /**
   * Optional device ID or staff identifier
   */
  device?: string | null;
  userAgent?: string | null;
  note?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "coupons".
 */
export interface Coupon {
  id: string;
  tenant: string | Tenant;
  /**
   * The code customers enter during checkout.
   */
  code: string;
  discountType: 'fixed' | 'percentage';
  /**
   * The fixed amount or percentage (depending on type)
   */
  value: number;
  /**
   * Only valid for this event if set
   */
  event?: (string | null) | Event;
  /**
   * Only valid for this ticket type if set
   */
  ticketType?: (string | null) | EventTicketType;
  validFrom?: string | null;
  validUntil?: string | null;
  /**
   * Max number of times this code can be used
   */
  usageLimit?: number | null;
  /**
   * Number of times this code has been used
   */
  used?: number | null;
  enabled?: boolean | null;
  /**
   * Only visible in admin panel
   */
  note?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "emails".
 */
export interface Email {
  id: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  /**
   * If checked, email goes to every customer from those shop(s).
   */
  allCustomers?: boolean | null;
  /**
   * Choose one or more specific customers to email.
   */
  recipients?: (string | Customer)[] | null;
  /**
   * Add additional email addresses separated by a semicolon (;).
   */
  extraRecipients?: string | null;
  subject: string;
  body: string;
  /**
   * Check to send this email when you press Save. If left unchecked, it remains a draft.
   */
  send?: boolean | null;
  sentAt?: string | null;
  sentToEmails?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "smtp-settings".
 */
export interface SmtpSetting {
  id: string;
  title: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  /**
   * Choose which provider this configuration applies to.
   */
  provider: 'gmail' | 'outlook' | 'orderapp' | 'custom' | 'brevo';
  host?: string | null;
  /**
   * Typically 587 or 465 if using TLS/SSL.
   */
  port?: number | null;
  username?: string | null;
  password?: string | null;
  /**
   * The display name the customer sees as sender, e.g. “YourShopName”.
   */
  fromName?: string | null;
  /**
   * The actual email address. E.g. no-reply@yourshop.com.
   */
  fromEmail?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "email-logs".
 */
export interface EmailLog {
  id: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  /**
   * The email address that we attempted to send to.
   */
  to: string;
  /**
   * The “From” address used, e.g. "ShopName <no-reply@...>"
   */
  from: string;
  /**
   * Subject line that was used in the email.
   */
  subject?: string | null;
  /**
   * Did it succeed or fail?
   */
  status?: ('pending' | 'success' | 'failed') | null;
  /**
   * Categorize the email for filtering and stats.
   */
  emailType?: ('ticket_confirmation' | 'magic_link' | 'reset_password' | 'marketing' | 'custom') | null;
  customer?: (string | null) | Customer;
  /**
   * If it failed, store the error text or reason here.
   */
  errorMessage?: string | null;
  /**
   * Optionally store some or all of the email’s HTML body. (Truncate if large.)
   */
  htmlBodySnippet?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletters".
 */
export interface Newsletter {
  id: string;
  tenant: string | Tenant;
  subject: string;
  /**
   * Main content of the newsletter email
   */
  body: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  status?: ('draft' | 'scheduled' | 'sent') | null;
  /**
   * Date/time to send this newsletter (if scheduled)
   */
  sendDate?: string | null;
  /**
   * Who should receive this mailing?
   */
  audience: 'all' | 'tagged' | 'event' | 'manual';
  /**
   * Only customers with these tags will receive this newsletter.
   */
  targetTags?: (string | Customer)[] | null;
  /**
   * Only customers who bought tickets for this event will receive it.
   */
  targetEvent?: (string | null) | Event;
  /**
   * Enter an email to test this newsletter before sending it live.
   */
  sendTestEmail?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "support-articles".
 */
export interface SupportArticle {
  id: string;
  tenant: string | Tenant;
  title: string;
  slug: string;
  /**
   * Used to group articles in the frontend (e.g. "Login Issues").
   */
  category?: string | null;
  /**
   * Markdown supported
   */
  body: string;
  isPublic?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "analytics".
 */
export interface Analytics {
  id: string;
  tenant: string | Tenant;
  /**
   * E.g. "Daily Ticket Sales" or "Scan Summary"
   */
  label: string;
  event?: (string | null) | Event;
  date: string;
  /**
   * Precomputed metrics (sales, scans, revenue, etc.)
   */
  data?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "venue-branding".
 */
export interface VenueBranding {
  id: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  venueTitle: string;
  siteLogo?: (string | null) | Media;
  siteFavicon?: (string | null) | Media;
  headerImage?: (string | null) | Media;
  headerBackgroundColor?: string | null;
  headerTextColor?: string | null;
  primaryColorCTA?: string | null;
  venueHeaderText?: string | null;
  venueIntroText?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "seat-map-templates".
 */
export interface SeatMapTemplate {
  id: string;
  name: string;
  rows: number;
  columns: number;
  basePrice?: number | null;
  curve?: number | null;
  rowFormat?: ('Numeric' | 'Letter' | 'RNumber' | 'RowNumber' | 'Continuous') | null;
  colFormat?: ('Numeric' | 'Letter' | 'RNumber' | 'RowNumber' | 'Continuous') | null;
  seats?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  isPublic?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "email-templates".
 */
export interface EmailTemplate {
  id: string;
  tenant: string | Tenant;
  name: string;
  subject?: string | null;
  /**
   * Main content of the template, can be HTML or rich text.
   */
  body?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  isPublic?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  /**
   * Title of the page.
   */
  title?: string | null;
  /**
   * Used for URL paths, e.g., /page-slug.
   */
  slug?: string | null;
  /**
   * Used for URL paths, e.g., /page-slug.
   */
  slug2?: string | null;
  tenant: string | Tenant;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'customers';
        value: string | Customer;
      } | null)
    | ({
        relationTo: 'tenants';
        value: string | Tenant;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'roles';
        value: string | Role;
      } | null)
    | ({
        relationTo: 'membership-roles';
        value: string | MembershipRole;
      } | null)
    | ({
        relationTo: 'shops';
        value: string | Shop;
      } | null)
    | ({
        relationTo: 'events';
        value: string | Event;
      } | null)
    | ({
        relationTo: 'event-ticket-types';
        value: string | EventTicketType;
      } | null)
    | ({
        relationTo: 'seatMaps';
        value: string | SeatMap;
      } | null)
    | ({
        relationTo: 'addons';
        value: string | Addon;
      } | null)
    | ({
        relationTo: 'orders';
        value: string | Order;
      } | null)
    | ({
        relationTo: 'tickets';
        value: string | Ticket;
      } | null)
    | ({
        relationTo: 'checkins';
        value: string | Checkin;
      } | null)
    | ({
        relationTo: 'payment-methods';
        value: string | PaymentMethod;
      } | null)
    | ({
        relationTo: 'coupons';
        value: string | Coupon;
      } | null)
    | ({
        relationTo: 'emails';
        value: string | Email;
      } | null)
    | ({
        relationTo: 'smtp-settings';
        value: string | SmtpSetting;
      } | null)
    | ({
        relationTo: 'email-logs';
        value: string | EmailLog;
      } | null)
    | ({
        relationTo: 'newsletters';
        value: string | Newsletter;
      } | null)
    | ({
        relationTo: 'support-articles';
        value: string | SupportArticle;
      } | null)
    | ({
        relationTo: 'analytics';
        value: string | Analytics;
      } | null)
    | ({
        relationTo: 'venue-branding';
        value: string | VenueBranding;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'seat-map-templates';
        value: string | SeatMapTemplate;
      } | null)
    | ({
        relationTo: 'email-templates';
        value: string | EmailTemplate;
      } | null)
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null);
  globalSlug?: string | null;
  user:
    | {
        relationTo: 'customers';
        value: string | Customer;
      }
    | {
        relationTo: 'users';
        value: string | User;
      };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user:
    | {
        relationTo: 'customers';
        value: string | Customer;
      }
    | {
        relationTo: 'users';
        value: string | User;
      };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customers_select".
 */
export interface CustomersSelect<T extends boolean = true> {
  firstname?: T;
  lastname?: T;
  phone?: T;
  date_of_birth?: T;
  tags?:
    | T
    | {
        tag_id?: T;
        tag_type?: T;
        id?: T;
      };
  enabled?: T;
  tenant?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tenants_select".
 */
export interface TenantsSelect<T extends boolean = true> {
  name?: T;
  domains?:
    | T
    | {
        domain?: T;
        id?: T;
      };
  slug?: T;
  stripeCustomerId?: T;
  managedByReseller?: T;
  public?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  roles?: T;
  tenants?:
    | T
    | {
        tenant?: T;
        roles?: T;
        id?: T;
      };
  stripeCustomerId?: T;
  fullName?: T;
  phoneNumber?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "roles_select".
 */
export interface RolesSelect<T extends boolean = true> {
  name?: T;
  collections?:
    | T
    | {
        collectionName?: T;
        read?: T;
        create?: T;
        update?: T;
        delete?: T;
        id?: T;
      };
  fields?:
    | T
    | {
        collectionName?: T;
        fieldName?: T;
        read?: T;
        create?: T;
        update?: T;
        delete?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "membership-roles_select".
 */
export interface MembershipRolesSelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  label?: T;
  value?: T;
  defaultRole?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "shops_select".
 */
export interface ShopsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  showExceptionallyClosedDaysOnOrderPage?: T;
  exceptionally_closed_days?:
    | T
    | {
        date?: T;
        reason?: T;
        id?: T;
      };
  address?: T;
  location?:
    | T
    | {
        lat?: T;
        lng?: T;
      };
  company_details?:
    | T
    | {
        company_name?: T;
        contact_email?: T;
        phone?: T;
        street?: T;
        house_number?: T;
        city?: T;
        postal?: T;
        vat_nr?: T;
        website_url?: T;
      };
  domain?: T;
  tenant?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events_select".
 */
export interface EventsSelect<T extends boolean = true> {
  tenant?: T;
  title?: T;
  slug?: T;
  introText?: T;
  description?: T;
  image?: T;
  affiche?: T;
  venue?: T;
  date?: T;
  end?: T;
  type?: T;
  isPublished?: T;
  embedAllowed?: T;
  language?: T;
  seatMap?: T;
  ticketTypes?:
    | T
    | {
        id?: T;
        name?: T;
        price?: T;
        color?: T;
      };
  seatAssignments?: T;
  performers?:
    | T
    | {
        image?: T;
        stageName?: T;
        realName?: T;
        socials?:
          | T
          | {
              facebook?: T;
              instagram?: T;
              linkedin?: T;
              x?: T;
            };
        id?: T;
      };
  sponsors?:
    | T
    | {
        logo?: T;
        id?: T;
      };
  faqs?:
    | T
    | {
        question?: T;
        answer?: T;
        id?: T;
      };
  googleMapsIframe?: T;
  location?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "event-ticket-types_select".
 */
export interface EventTicketTypesSelect<T extends boolean = true> {
  tenant?: T;
  event?: T;
  seatMap?: T;
  name?: T;
  price?: T;
  sortOrder?: T;
  vatRate?: T;
  maxAmount?: T;
  description?: T;
  visible?: T;
  color?: T;
  isSeatBased?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "seatMaps_select".
 */
export interface SeatMapsSelect<T extends boolean = true> {
  tenant?: T;
  name?: T;
  venue?: T;
  rows?: T;
  columns?: T;
  curve?: T;
  seats?:
    | T
    | {
        row?: T;
        seat?: T;
        pinnedRow?: T;
        pinnedCol?: T;
        locks?:
          | T
          | {
              eventId?: T;
              lockedUntil?: T;
              id?: T;
            };
        status?: T;
        purpose?: T;
        groupLabel?: T;
        groupReleaseOrder?: T;
        groupMinToReleaseNext?: T;
        id?: T;
      };
  seatMapJSON?: T;
  backgroundImage?: T;
  rowFormat?: T;
  colFormat?: T;
  isDefault?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "addons_select".
 */
export interface AddonsSelect<T extends boolean = true> {
  tenant?: T;
  name?: T;
  description?: T;
  price?: T;
  isPerTicket?: T;
  available?: T;
  maxQuantity?: T;
  image?: T;
  events?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders_select".
 */
export interface OrdersSelect<T extends boolean = true> {
  tenant?: T;
  orderNr?: T;
  createdAt?: T;
  customer?: T;
  addonSelections?:
    | T
    | {
        seatId?: T;
        addonId?: T;
        quantity?: T;
        id?: T;
      };
  event?: T;
  tickets?: T;
  addons?: T;
  status?: T;
  paymentProvider?: T;
  paymentMethod?: T;
  paymentReference?: T;
  total?: T;
  couponCode?: T;
  ipAddress?: T;
  locale?: T;
  updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tickets_select".
 */
export interface TicketsSelect<T extends boolean = true> {
  tenant?: T;
  barcode?: T;
  event?: T;
  ticketType?: T;
  order?: T;
  customer?: T;
  seatRow?: T;
  seatNumber?: T;
  price?: T;
  vatRate?: T;
  status?: T;
  issuedAt?: T;
  scannedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "checkins_select".
 */
export interface CheckinsSelect<T extends boolean = true> {
  tenant?: T;
  ticket?: T;
  status?: T;
  scannedAt?: T;
  device?: T;
  userAgent?: T;
  note?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payment-methods_select".
 */
export interface PaymentMethodsSelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  provider?: T;
  mollie_settings?:
    | T
    | {
        enable_test_mode?: T;
        live_api_key?: T;
        test_api_key?: T;
        webhook_secret?: T;
      };
  enabled?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "coupons_select".
 */
export interface CouponsSelect<T extends boolean = true> {
  tenant?: T;
  code?: T;
  discountType?: T;
  value?: T;
  event?: T;
  ticketType?: T;
  validFrom?: T;
  validUntil?: T;
  usageLimit?: T;
  used?: T;
  enabled?: T;
  note?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "emails_select".
 */
export interface EmailsSelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  allCustomers?: T;
  recipients?: T;
  extraRecipients?: T;
  subject?: T;
  body?: T;
  send?: T;
  sentAt?: T;
  sentToEmails?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "smtp-settings_select".
 */
export interface SmtpSettingsSelect<T extends boolean = true> {
  title?: T;
  tenant?: T;
  shops?: T;
  provider?: T;
  host?: T;
  port?: T;
  username?: T;
  password?: T;
  fromName?: T;
  fromEmail?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "email-logs_select".
 */
export interface EmailLogsSelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  to?: T;
  from?: T;
  subject?: T;
  status?: T;
  emailType?: T;
  customer?: T;
  errorMessage?: T;
  htmlBodySnippet?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletters_select".
 */
export interface NewslettersSelect<T extends boolean = true> {
  tenant?: T;
  subject?: T;
  body?: T;
  status?: T;
  sendDate?: T;
  audience?: T;
  targetTags?: T;
  targetEvent?: T;
  sendTestEmail?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "support-articles_select".
 */
export interface SupportArticlesSelect<T extends boolean = true> {
  tenant?: T;
  title?: T;
  slug?: T;
  category?: T;
  body?: T;
  isPublic?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "analytics_select".
 */
export interface AnalyticsSelect<T extends boolean = true> {
  tenant?: T;
  label?: T;
  event?: T;
  date?: T;
  data?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "venue-branding_select".
 */
export interface VenueBrandingSelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  venueTitle?: T;
  siteLogo?: T;
  siteFavicon?: T;
  headerImage?: T;
  headerBackgroundColor?: T;
  headerTextColor?: T;
  primaryColorCTA?: T;
  venueHeaderText?: T;
  venueIntroText?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  tenant?: T;
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  alt_text?: T;
  blurhash?: T;
  s3_url?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        preview?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "seat-map-templates_select".
 */
export interface SeatMapTemplatesSelect<T extends boolean = true> {
  name?: T;
  rows?: T;
  columns?: T;
  basePrice?: T;
  curve?: T;
  rowFormat?: T;
  colFormat?: T;
  seats?: T;
  isPublic?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "email-templates_select".
 */
export interface EmailTemplatesSelect<T extends boolean = true> {
  tenant?: T;
  name?: T;
  subject?: T;
  body?: T;
  isPublic?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slug2?: T;
  tenant?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}